import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
import config
import keyboard
import parsing_horoscope

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
# –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ parse_mode
bot = Bot(config.TOKEN, parse_mode=types.ParseMode.HTML)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (Dispatcher - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç), –ø—Ä–∏ —ç—Ç–æ–º —É–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –Ω–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp = Dispatcher(bot, storage=storage)
# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename='log.txt', level=logging.INFO, format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s '
                                                                   u'[%(asctime)s] %(message)s')


# –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class info_about_user(StatesGroup):
    info_about_user_1 = State()
    info_about_user_2 = State()
    info_about_user_3 = State()


@dp.message_handler(commands='about_me', state=None)
async def enter_admin_info(message: types.Message):
    await bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await info_about_user.info_about_user_1.set()


@dp.message_handler(state=info_about_user.info_about_user_1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer1=answer)
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ø–æ–ª")
    await info_about_user.info_about_user_2.set()


@dp.message_handler(state=info_about_user.info_about_user_2)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer2=answer)
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    await info_about_user.info_about_user_3.set()


@dp.message_handler(state=info_about_user.info_about_user_3)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer3=answer)
    await message.answer("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°–ø–∞—Å–∏–±–æ!")

    data = await state.get_data()
    answer1 = data.get("answer1")
    answer2 = data.get("answer2")
    answer3 = data.get("answer3")

    joinFile = open("age.txt", "w", encoding="utf-8")
    joinFile.write(str(answer1))
    joinFile = open("gender.txt", "w", encoding="utf-8")
    joinFile.write(str(answer2))
    joinFile = open("work.txt", "w", encoding="utf-8")
    joinFile.write(str(answer2))

    await message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: {answer1},{answer2}, {answer3}")
    await state.finish()


# –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class admin_info(StatesGroup):
    admin_info_1 = State()
    admin_info_2 = State()


@dp.message_handler(commands='me', state=None)
async def enter_admin_info(message: types.Message):
    if message.chat.id == config.admin:
        await bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
        await admin_info.admin_info_1.set()


@dp.message_handler(state=admin_info.admin_info_1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer1=answer)
    await message.answer("–õ–∏–Ω–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. \n" "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    await admin_info.admin_info_2.set()


@dp.message_handler(state=admin_info.admin_info_2)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer2=answer)
    await message.answer("–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    data = await state.get_data()
    answer1 = data.get("answer1")
    answer2 = data.get("answer2")

    joinFile = open("link.txt", "w", encoding="utf-8")
    joinFile.write(str(answer1))
    joinFile = open("text.txt", "w", encoding="utf-8")
    joinFile.write(str(answer2))

    await message.answer(f"–°—Å—ã–ª–∫–∞: {answer1}. –í–∞—à —Ç–µ–∫—Å—Ç {answer2}")
    await state.finish()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands='start', state=None)
async def welcome(message: types.Message):
    # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª user.txt –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è
    joined_file = open('user.txt', 'r')
    # —Å–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    joined_users = set()
    # –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ user.txt
    for line in joined_file:
        # –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –Ω–∞—à–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        joined_users.add(line.strip())
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª /start
    # –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not str(message.chat.id) in joined_users:
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª user.txt –Ω–∞ –¥–æ–∑–∞–ø–∏—Å—å
        joined_file = open('user.txt', 'a')
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–µ–≥–æ id –Ω–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        joined_file.write(str(message.chat.id) + '\n')
        # –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        joined_users.add(message.chat.id)
        # –≥–æ–≤–æ—Ä–∏–º –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏ —ç—Ç–æ–º
    await bot.send_message(
        # –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message.chat.id,
        # —É–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ hello + –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}üñê, \n—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?',
        # –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ keyboard, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π start
        reply_markup=keyboard.start)
    await message.answer('–≠—Ç–∏ –∑–Ω–∞–Ω–∏—è –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –¥–µ–Ω—åüòá',
                         reply_markup=keyboard.answer_1)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands='stat', state=None)
async def welcome(message: types.Message):
    if message.chat.id == config.admin:
        await bot.send_message(
            message.chat.id,
            text='–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞?',
            reply_markup=keyboard.stats)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands='develop', state=None)
async def welcome(message: types.Message):
    if message.chat.id == config.admin:
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—à —Ñ–∞–π–ª link.txt
        with open("link.txt", encoding="UTF-8") as link_txt:
            # —Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é link
            link = link_txt.read()
        with open("text.txt", encoding="UTF-8") as text_txt:
            text = text_txt.read()
        await bot.send_message(message.chat.id, text=f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {link} \n {text}", reply_markup=keyboard.start)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands='mailing_list_1', state=None)
# –∑–∞–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def mailing_list(message: types.Message):
    # —Å–≤–µ—Ä—è–µ–º id –ø–æ—Å–ª–∞–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å id –∞–¥–º–∏–Ω–∞
    if message.chat.id == config.admin:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(message.chat.id, f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å')
    # –∑–∞–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è–≤—à–∏—Ö –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö
    recieve_users, block_users = 0, 0
    # –æ—Ç–∫—Ä—ã–≤–∞–µ–º user.txt –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è
    with open('user.txt', 'r') as file:
        # —Å–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        joined_users = set()
        # –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª—É –ø–æ –≤—Å–µ–º id –≤ —Ñ–∞–π–ª–µ
        for line in file:
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ id
            joined_users.add(line.strip())
        # –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
        for user in joined_users:
            try:
                await bot.send_message(user,
                                       text="–†–∞—Å–∫–∞–∂–µ—à—å –ø—Ä–æ —Å–µ–±—è? –ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —è —Å–º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞–±–µ—Ä–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ /about_me, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.")
                await bot.send_photo(user, open('photo_2.jpg', 'rb'))
                recieve_users += 1
            except:
                block_users += 1
            await asyncio.sleep(0.4)
        await bot.send_message(message.chat.id, f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ \n'
                                                f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏: *{recieve_users}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π \n'
                                                f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: *{block_users}*')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="yes_1")
async def look_total_horo(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—èüå†* \n\n{parsing_horoscope.total_horo_list}",
                                parse_mode='Markdown')
    await bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥–æ–ª–∂–∏–º?", reply_markup=keyboard.yes)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="no_1")
async def not_look_total_horo(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"–ü–æ–Ω—è—Ç–Ω–æüôÇ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø - –∂–º–∏ –Ω–∞  –∫–Ω–æ–ø–∫—É '–ú–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø'‚§µ ",
                                parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="yes_2")
async def choose_sign(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞", reply_markup=keyboard.sign_zodiac)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="aries")
async def horo_for_aries(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –û–≤–Ω–∞‚ôà* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="taurus")
async def horo_for_taurus(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –¢–µ–ª—å—Ü–∞‚ôâ* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="gemini")
async def horo_for_gemini(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –ë–ª–∏–∑–Ω–µ—Ü–æ–≤‚ôä* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="cancer")
async def horo_for_cancer(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –†–∞–∫–∞‚ôã* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="leo")
async def horo_for_leo(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –õ—å–≤–∞‚ôå* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="virgo")
async def horo_for_virgo(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –î–µ–≤—ã‚ôç* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="libra")
async def horo_for_libra(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –í–µ—Å–æ–≤‚ôé* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="scorpio")
async def horo_for_scorpio(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –°–∫–æ—Ä–ø–∏–æ–Ω–∞‚ôè* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="sagittarius")
async def horo_for_sagittarius(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –°—Ç—Ä–µ–ª—å—Ü–∞‚ôê* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="capricom")
async def horo_for_capricom(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –ö–æ–∑–µ—Ä–æ–≥–∞‚ôë* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="aquarius")
async def horo_for_aquarius(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –í–æ–¥–æ–ª–µ—è‚ôí* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="pisces")
async def horo_for_pisces(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –†—ã–±‚ôì* \n\n—Å—é–¥–∞ –Ω–∞–¥–æ —Å–ø–∞—Ä—Å–∏—Ç—å –∏–Ω—Ñ—É —Å —Å–∞–π—Ç–∞", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="join")
async def send_stat_about_bot(call: types.CallbackQuery):
    if call.message.chat.id == config.admin:
        d = sum(1 for line in open("user.txt"))
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞: *{d}* —á–µ–ª–æ–≤–µ–∫", parse_mode='Markdown')
    else:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–£ —Ç–µ–±—è –Ω–µ—Ç –∞–¥–º–∏–Ω–∫–∏", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text_contains="cancel")
async def horo_for_pisces(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=f"–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", parse_mode='Markdown')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
@dp.message_handler(content_types=['text'])
# –∑–∞–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def info_static(message: types.Message):
    # –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
    if message.text == 'üìî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        # –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –µ–≥–æ
        await bot.send_message(message.chat.id,
                               # —Å —Ç–µ–∫—Å—Ç–æ–º
                               text='–¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –∏ —è –±—É–¥—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –≥–æ—Ä–æ—Å–∫–æ–ø.',
                               # —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                               parse_mode='Markdown')
    if message.text == '‚è∞–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        # –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –µ–≥–æ
        await bot.send_message(message.chat.id,
                               # —Å —Ç–µ–∫—Å—Ç–æ–º
                               text='–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ',
                               # —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                               parse_mode='Markdown')
    if message.text == '‚úÖ–ú–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø':
        await message.answer(f"*–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –≤—Å–µ—Ö –∑–Ω–∞–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—èüå†* \n\n{parsing_horoscope.total_horo_list}",
                             parse_mode='Markdown')
        await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏–º?", reply_markup=keyboard.yes)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
